!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FT_Cache_CLIENT	ftc_client.cpp	15;"	d	file:
FT_Cache_LOG_DIR	ftc_logging.h	73;"	d
FT_Cache_LOG_LEVEL	ftc_logging.h	69;"	d
FT_Cache_LOG_PREFIX	ftc_logging.h	78;"	d
FT_Cache_SERVER	ftc_server.cpp	9;"	d	file:
FT_Cache_VERSION	ftc_internal.h	25;"	d
FT_Cache_finalize_logging	ftc_logging.c	/^void FT_Cache_finalize_logging()$/;"	f
L4C_ALERT	ftc_logging.h	85;"	d
L4C_CAT_NAME	ftc_logging.h	41;"	d
L4C_CAT_NAME	ftc_logging.h	49;"	d
L4C_CAT_NAME	ftc_logging.h	60;"	d
L4C_CRIT	ftc_logging.h	86;"	d
L4C_DEBUG	ftc_logging.h	91;"	d
L4C_ERR	ftc_logging.h	87;"	d
L4C_FATAL	ftc_logging.h	84;"	d
L4C_INFO	ftc_logging.h	90;"	d
L4C_LOG_AT_PRIORITY	ftc_logging.h	81;"	d
L4C_LOG_DIR	ftc_logging.h	46;"	d
L4C_LOG_DIR	ftc_logging.h	55;"	d
L4C_LOG_NAME_PREFIX	ftc_logging.h	47;"	d
L4C_LOG_NAME_PREFIX	ftc_logging.h	56;"	d
L4C_NOTICE	ftc_logging.h	89;"	d
L4C_PERROR	ftc_logging.h	98;"	d
L4C_TRACE	ftc_logging.h	92;"	d
L4C_WARN	ftc_logging.h	88;"	d
MAP_OR_FAIL	ftc_internal.h	34;"	d
MAP_OR_FAIL	ftc_internal.h	51;"	d
REAL_DECL	ftc_internal.h	29;"	d
REAL_DECL	ftc_internal.h	46;"	d
WRAP_DECL	ftc_internal.h	32;"	d
WRAP_DECL	ftc_internal.h	49;"	d
_FT_Cache_LOGGING_H_	ftc_logging.h	20;"	d
__FT_Cache_DATA_MOVER_INTERNAL_H__	ftc_data_mover_internal.h	2;"	d
__FT_Cache_INTERNAL_H__	ftc_internal.h	9;"	d
__FT_Cache_RPC_ENGINE_INTERNAL_H__	ftc_comm.h	2;"	d
addr	ftc_server.cpp	/^	hg_addr_t addr;$/;"	m	struct:ftc_lookup_arg	file:
address_cache	ftc_comm_client.cpp	/^std::map<int, std::string> address_cache;$/;"	v
buffer	ftc_comm.cpp	/^    void *buffer;$/;"	m	struct:ftc_rpc_state	file:
buffer	ftc_comm_client.cpp	/^    void *buffer;$/;"	m	struct:ftc_rpc_state	file:
bulk_handle	ftc_comm.cpp	/^    hg_bulk_t bulk_handle;$/;"	m	struct:ftc_rpc_state	file:
bulk_handle	ftc_comm_client.cpp	/^    hg_bulk_t bulk_handle;$/;"	m	struct:ftc_rpc_state	file:
close	wrappers.c	/^int WRAP_DECL(close)(int fd)$/;"	f
context	ftc_server.cpp	/^	hg_context_t *context;$/;"	m	struct:ftc_lookup_arg	file:
data_cond	ftc_data_mover.cpp	/^pthread_cond_t data_cond = PTHREAD_COND_INITIALIZER;$/;"	v
data_mutex	ftc_data_mover.cpp	/^pthread_mutex_t data_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
data_queue	ftc_data_mover.cpp	/^queue<string> data_queue;$/;"	v
done	ftc_comm_client.cpp	/^static hg_bool_t done = HG_FALSE;$/;"	v	file:
done_cond	ftc_comm_client.cpp	/^static pthread_cond_t done_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
done_mutex	ftc_comm_client.cpp	/^static pthread_mutex_t done_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
fd_map	ftc_client.cpp	/^std::map<int,std::string> fd_map;$/;"	v
fd_redir_map	ftc_client.cpp	/^std::map<int, int > fd_redir_map;$/;"	v
fd_to_path	ftc_data_mover.cpp	/^map<int,string> fd_to_path;$/;"	v
fopen	wrappers.c	/^FILE *WRAP_DECL(fopen)(const char *path, const char *mode)$/;"	f
fopen64	wrappers.c	/^FILE *WRAP_DECL(fopen64)(const char *path, const char *mode)$/;"	f
g_disable_redirect	ftc_client.cpp	/^bool g_disable_redirect = true;$/;"	v
g_ftc_comm_initialized	ftc_client.cpp	/^bool g_ftc_comm_initialized = false;$/;"	v
g_ftc_initialized	ftc_client.cpp	/^bool g_ftc_initialized = false;$/;"	v
g_ftc_server_count	ftc_client.cpp	/^uint32_t g_ftc_server_count = 0;$/;"	v
g_mercury_init	ftc_client.cpp	/^bool g_mercury_init=false;$/;"	v
handle	ftc_comm.cpp	/^    hg_handle_t handle;$/;"	m	struct:ftc_rpc_state	file:
handle	ftc_comm_client.cpp	/^    hg_handle_t handle;$/;"	m	struct:ftc_rpc_state	file:
hg_class	ftc_comm.cpp	/^static hg_class_t *hg_class = NULL;$/;"	v	file:
hg_class	ftc_server.cpp	/^	hg_class_t *hg_class;$/;"	m	struct:ftc_lookup_arg	file:
hg_context	ftc_comm.cpp	/^static hg_context_t *hg_context = NULL;$/;"	v	file:
ftc_client_block	ftc_comm_client.cpp	/^void ftc_client_block()$/;"	f
ftc_client_close_id	ftc_comm_client.cpp	/^static hg_id_t ftc_client_close_id;$/;"	v	file:
ftc_client_comm_gen_close_rpc	ftc_comm_client.cpp	/^void ftc_client_comm_gen_close_rpc(uint32_t svr_hash, int fd)$/;"	f
ftc_client_comm_gen_open_rpc	ftc_comm_client.cpp	/^void ftc_client_comm_gen_open_rpc(uint32_t svr_hash, string path, int fd)$/;"	f
ftc_client_comm_gen_read_rpc	ftc_comm_client.cpp	/^void ftc_client_comm_gen_read_rpc(uint32_t svr_hash, int localfd, void *buffer, ssize_t count, off_t offset)$/;"	f
ftc_client_comm_gen_seek_rpc	ftc_comm_client.cpp	/^void ftc_client_comm_gen_seek_rpc(uint32_t svr_hash, int fd, int offset, int whence)$/;"	f
ftc_client_comm_lookup_addr	ftc_comm_client.cpp	/^hg_addr_t ftc_client_comm_lookup_addr(int rank)$/;"	f
ftc_client_comm_register_rpc	ftc_comm_client.cpp	/^void ftc_client_comm_register_rpc()$/;"	f
ftc_client_init	ftc_client.cpp	/^static void __attribute__((constructor)) ftc_client_init()$/;"	f	file:
ftc_client_open_id	ftc_comm_client.cpp	/^static hg_id_t ftc_client_open_id;$/;"	v	file:
ftc_client_rpc_id	ftc_comm_client.cpp	/^static hg_id_t ftc_client_rpc_id;$/;"	v	file:
ftc_client_seek_id	ftc_comm_client.cpp	/^static hg_id_t ftc_client_seek_id;$/;"	v	file:
ftc_client_shutdown	ftc_client.cpp	/^static void __attribute((destructor)) ftc_client_shutdown()$/;"	f
ftc_close_rpc_handler	ftc_comm.cpp	/^ftc_close_rpc_handler(hg_handle_t handle)$/;"	f	file:
ftc_close_rpc_register	ftc_comm.cpp	/^ftc_close_rpc_register(void)$/;"	f
ftc_comm_create_handle	ftc_comm.cpp	/^ftc_comm_create_handle(hg_addr_t addr, hg_id_t id, hg_handle_t *handle)$/;"	f
ftc_comm_free_addr	ftc_comm.cpp	/^ftc_comm_free_addr(hg_addr_t addr)$/;"	f
ftc_comm_get_class	ftc_comm.cpp	/^hg_class_t *ftc_comm_get_class()$/;"	f
ftc_comm_get_context	ftc_comm.cpp	/^hg_context_t *ftc_comm_get_context()$/;"	f
ftc_comm_list_addr	ftc_comm.cpp	/^void ftc_comm_list_addr()$/;"	f
ftc_data_dir	ftc_client.cpp	/^char *ftc_data_dir = NULL;$/;"	v
ftc_data_mover_fn	ftc_data_mover.cpp	/^void *ftc_data_mover_fn(void *args)$/;"	f
ftc_file_tracked	ftc_client.cpp	/^bool ftc_file_tracked(int fd)$/;"	f
ftc_get_path	ftc_client.cpp	/^const char * ftc_get_path(int fd)$/;"	f
ftc_init_comm	ftc_comm.cpp	/^void ftc_init_comm(hg_bool_t listen)$/;"	f
ftc_init_logging	ftc_logging.c	/^void ftc_init_logging()$/;"	f
ftc_lookup_arg	ftc_server.cpp	/^struct ftc_lookup_arg {$/;"	s	file:
ftc_open_cb	ftc_comm_client.cpp	/^ftc_open_cb(const struct hg_cb_info *info)$/;"	f	file:
ftc_open_rpc_handler	ftc_comm.cpp	/^ftc_open_rpc_handler(hg_handle_t handle)$/;"	f	file:
ftc_open_rpc_register	ftc_comm.cpp	/^ftc_open_rpc_register(void)$/;"	f
ftc_open_state	ftc_comm_client.cpp	/^struct ftc_open_state{$/;"	s	file:
ftc_progress_fn	ftc_comm.cpp	/^void *ftc_progress_fn(void *args)$/;"	f
ftc_progress_thread_shutdown_flags	ftc_comm.cpp	/^static int ftc_progress_thread_shutdown_flags = 0;$/;"	v	file:
ftc_read_block	ftc_comm_client.cpp	/^ssize_t ftc_read_block()$/;"	f
ftc_read_cb	ftc_comm_client.cpp	/^ftc_read_cb(const struct hg_cb_info *info)$/;"	f	file:
ftc_remote_close	ftc_client.cpp	/^void ftc_remote_close(int fd){$/;"	f
ftc_remote_lseek	ftc_client.cpp	/^ssize_t ftc_remote_lseek(int fd, int offset, int whence)$/;"	f
ftc_remote_pread	ftc_client.cpp	/^ssize_t ftc_remote_pread(int fd, void *buf, size_t count, off_t offset)$/;"	f
ftc_remote_read	ftc_client.cpp	/^ssize_t ftc_remote_read(int fd, void *buf, size_t count)$/;"	f
ftc_remove_fd	ftc_client.cpp	/^bool ftc_remove_fd(int fd)$/;"	f
ftc_rpc_handler	ftc_comm.cpp	/^ftc_rpc_handler(hg_handle_t handle)$/;"	f	file:
ftc_rpc_handler_bulk_cb	ftc_comm.cpp	/^ftc_rpc_handler_bulk_cb(const struct hg_cb_info *info)$/;"	f	file:
ftc_rpc_register	ftc_comm.cpp	/^ftc_rpc_register(void)$/;"	f
ftc_rpc_state	ftc_comm.cpp	/^struct ftc_rpc_state {$/;"	s	file:
ftc_rpc_state	ftc_comm_client.cpp	/^struct ftc_rpc_state {$/;"	s	file:
ftc_seek_block	ftc_comm_client.cpp	/^ssize_t ftc_seek_block()$/;"	f
ftc_seek_cb	ftc_comm_client.cpp	/^ftc_seek_cb(const struct hg_cb_info *info)$/;"	f	file:
ftc_seek_rpc_handler	ftc_comm.cpp	/^ftc_seek_rpc_handler(hg_handle_t handle)$/;"	f	file:
ftc_seek_rpc_register	ftc_comm.cpp	/^ftc_seek_rpc_register(void)$/;"	f
ftc_server_count	ftc_server.cpp	/^uint32_t ftc_server_count = 0;$/;"	v
ftc_server_rank	ftc_comm.cpp	/^static int ftc_server_rank = -1;$/;"	v	file:
ftc_shutdown_comm	ftc_comm.cpp	/^void ftc_shutdown_comm()$/;"	f
ftc_start_comm_server	ftc_server.cpp	/^int ftc_start_comm_server(void)$/;"	f
ftc_track_file	ftc_client.cpp	/^bool ftc_track_file(const char *path, int flags, int fd)$/;"	f
id	ftc_server.cpp	/^	hg_id_t id;$/;"	m	struct:ftc_lookup_arg	file:
in	ftc_comm.cpp	/^    ftc_rpc_in_t in;$/;"	m	struct:ftc_rpc_state	file:
init_mutex	ftc_client.cpp	/^pthread_mutex_t init_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
local_fd	ftc_comm_client.cpp	/^    uint32_t local_fd;$/;"	m	struct:ftc_open_state	file:
log_preformatter_internal	ftc_logging.c	/^void log_preformatter_internal( unsigned priority, const char* filename, unsigned linenum, const char *format_str, ...)$/;"	f
lseek	wrappers.c	/^off_t WRAP_DECL(lseek)(int fd, off_t offset, int whence)$/;"	f
lseek64	wrappers.c	/^off64_t WRAP_DECL(lseek64)(int fd, off64_t offset, int whence)$/;"	f
main	ftc_server.cpp	/^int main(int argc, char **argv)$/;"	f
open	wrappers.c	/^int WRAP_DECL(open)(const char *pathname, int flags, ...)$/;"	f
open64	wrappers.c	/^int WRAP_DECL(open64)(const char *pathname, int flags, ...)$/;"	f
param_layout_to_use	ftc_logging.c	/^const char *param_layout_to_use = "dated"; \/\/ could also be "basic"$/;"	v
param_max_file_size	ftc_logging.c	/^long param_max_file_size = 100 * 1024 * 1024;  \/\/ Value is in bytes$/;"	v
param_max_num_files	ftc_logging.c	/^long param_max_num_files = 10;$/;"	v
path_cache_map	ftc_data_mover.cpp	/^map<string, string> path_cache_map;$/;"	v
pread	wrappers.c	/^ssize_t WRAP_DECL(pread)(int fd, void *buf, size_t count, off_t offset)$/;"	f
read	wrappers.c	/^ssize_t WRAP_DECL(read)(int fd, void *buf, size_t count)$/;"	f
read64	wrappers.c	/^ssize_t WRAP_DECL(read64)(int fd, void *buf, size_t count)$/;"	f
read_ret	ftc_comm_client.cpp	/^ssize_t read_ret = -1;$/;"	v
readv	wrappers.c	/^ssize_t WRAP_DECL(readv)(int fd, const struct iovec *iov, int iovcnt)$/;"	f
server_rank	ftc_comm.cpp	/^static int server_rank = -1;$/;"	v	file:
size	ftc_comm.cpp	/^    hg_size_t size;$/;"	m	struct:ftc_rpc_state	file:
size	ftc_comm_client.cpp	/^    hg_size_t size;$/;"	m	struct:ftc_rpc_state	file:
tl_disable_redirect	ftc_client.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
tl_disable_redirect	ftc_server.cpp	/^__thread bool tl_disable_redirect = false;$/;"	v
value	ftc_comm_client.cpp	/^    uint32_t value;$/;"	m	struct:ftc_rpc_state	file:
write	wrappers.c	/^ssize_t WRAP_DECL(write)(int fd, const void *buf, size_t count)$/;"	f
